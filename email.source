CREATE FUNCTION email_in(cstring)
   RETURNS EmailAddr
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_out(EmailAddr)
   RETURNS cstring
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_recv(internal)
   RETURNS EmailAddr
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_send(EmailAddr)
   RETURNS bytea
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE TYPE EmailAddr (
   internallength = VARIABLE,
   input = email_in,
   output = email_out,
   receive = email_recv,
   send = email_send,
   alignment = int4
);

CREATE FUNCTION email_eq(EmailAddr, EmailAddr)
   RETURNS bool
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;


CREATE FUNCTION email_gt(EmailAddr, EmailAddr)
   RETURNS bool
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_ge(EmailAddr, EmailAddr)
   RETURNS bool
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_lt(EmailAddr, EmailAddr)
   RETURNS bool
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_le(EmailAddr, EmailAddr)
   RETURNS bool
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_ne(EmailAddr, EmailAddr)
   RETURNS bool
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_de(EmailAddr, EmailAddr)
   RETURNS bool
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_dne(EmailAddr, EmailAddr)
   RETURNS bool
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_abs_cmp(EmailAddr, EmailAddr)
   RETURNS int4
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_check(EmailAddr)
   RETURNS int4
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_hash(EmailAddr)
   RETURNS int4
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR = (
   leftarg = EmailAddr,
   rightarg = EmailAddr,
   procedure = email_eq,
   commutator = =,
   restrict = eqsel, join = eqjoinsel, HASHES
);

CREATE OPERATOR > (
   leftarg = EmailAddr,
   rightarg = EmailAddr,
   procedure = email_gt,
   commutator = >,
   restrict = scalargtsel, join = scalargtjoinsel
);

CREATE OPERATOR >= (
   leftarg = EmailAddr,
   rightarg = EmailAddr,
   procedure = email_ge,
   commutator = >=,
   restrict = scalargesel, join = scalargejoinsel
);

CREATE OPERATOR < (
   leftarg = EmailAddr,
   rightarg = EmailAddr,
   procedure = email_lt,
   commutator = <,
   restrict = scalarltsel, join = scalarltjoinsel
);

CREATE OPERATOR <= (
   leftarg = EmailAddr,
   rightarg = EmailAddr,
   procedure = email_le,
   commutator = <=,
   restrict = scalarlesel, join = scalarlejoinsel
); 

CREATE OPERATOR <> (
   leftarg = EmailAddr,
   rightarg = EmailAddr,
   procedure = email_ne,
   commutator = <>,
   restrict = neqsel, join = neqjoinsel
);

CREATE OPERATOR ~ (
   leftarg = EmailAddr,
   rightarg = EmailAddr,
   procedure = email_de,
   commutator = ~,
   restrict = eqsel, join = eqjoinsel
);

CREATE OPERATOR !~ (
   leftarg = EmailAddr,
   rightarg = EmailAddr,
   procedure = email_dne,
   commutator = !~,
   restrict = neqsel, join = neqjoinsel
);

CREATE OPERATOR CLASS email_ops
   DEFAULT FOR TYPE EmailAddr USING btree AS
      OPERATOR 1 <,
      OPERATOR 2 <=,
      OPERATOR 3 =,
      OPERATOR 4 >=,
      OPERATOR 5 >,
      FUNCTION 1 email_abs_cmp(EmailAddr, EmailAddr);
	  
CREATE OPERATOR CLASS email_ops
   DEFAULT FOR TYPE EmailAddr USING hash AS
      OPERATOR 1 = ,
      FUNCTION 1 email_hash(EmailAddr);

